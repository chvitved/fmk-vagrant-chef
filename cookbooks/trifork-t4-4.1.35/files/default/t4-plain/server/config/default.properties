##
## This file defines the standard system properties for the 
## Trifork Applications Server
##

##
## Misc internal properties
##

jmx.invoke.getters=true

trifork.server.gctimer=false

# in devel mode, the web container will add a servlet to all wars
# with this servlet path used for JSP debugging.  The URI
#  	/context-root/show-war-file/path/to/file.jsp 
# will generate a html page with the named jsp (or java file).
trifork.showwarfile.servletpath=/show-war-file

java.naming.factory.initial=com.trifork.eas.naming.DefaultInitialContextFactory
java.naming.corba.orb=
java.protocol.handler.pkgs=com.trifork.eas.naming.protocol

javax.rmi.CORBA.StubClass=com.trifork.rmi.impl.StubImpl
javax.rmi.CORBA.UtilClass=com.trifork.rmi.impl.UtilImpl
javax.rmi.CORBA.PortableRemoteObjectClass=com.trifork.rmi.impl.PortableRemoteObjectImpl

org.omg.CORBA.ORBClass=dk.eos.corba.core.ORB
org.omg.CORBA.ORBSingletonClass=dk.eos.corba.core.SingletonORB

trifork.lib.dir=${trifork.install.dir}${file.separator}lib${file.separator}
trifork.security.dir=${trifork.lib.dir}security${file.separator}
java.security.auth.login.config=${trifork.security.dir}jaas.config
#java.security.policy==${trifork.security.dir}server.policy

trifork.corba.portingClass=com.trifork.util.corba.TORBPorting

#trifork.cmp.TableManagerClass=com.trifork.eas.cmp.tablehandler.SPTableManager
trifork.cmp.TableManagerClass=com.trifork.eas.cmp.tablehandler.SQLTableManager


##
## SSL configuration
##
trifork.security.providers=

trifork.security.keystore.file=keystore.jks
trifork.security.keystore.type=JKS
trifork.security.keystore.passphrase=changeit
trifork.security.keymanager=SunX509

trifork.security.truststore.file=cacerts.jks
trifork.security.truststore.passphrase=changeit

##
## SSL default parameters
##
trifork.ssl.protocol=TLS
trifork.ssl.require_confidentiality=false
trifork.ssl.require_integrity=false
trifork.ssl.require_trust_in_server=false
#trifork.ssl.require_trust_in_client=false

##
## Specify which algorithms are permitted.  The SSL engine will use
## these to limit which SSL cipher suites are selected based on runtime
## configuration parameters.
##
## In specific, if you remove NULL, DH_anon and DH_anon_EXPORT from
## the list of key store exchange mechanisms, clients with no keystore
## configuration will not be able to connect.
##
trifork.ssl.key_exchange= RSA RSA_EXPORT DHE_DSS DHE_DSS_EXPORT DH_anon DH_anon_EXPORT NULL
trifork.ssl.hash= SHA MD5 NULL
trifork.ssl.crypt= DES_CBC 3DES_EDE_CBC DES40_CBC RC4_128 RC4_40 NULL

##
## How often (in seconds) to run the JDBC pool cleanup timer. 
## a value of zero (0) means neveer.
##
trifork.jdbcpool.cleanupInterval=1800

##
## Default life time of a physical JDBC connection.  This value
## can also be set as a property on a data source.  A value of zero
## (0) means that a connection is never closed once created.
##
trifork.jdbcpool.timeToLive=0
trifork.jdbcpool.idleTime=600

##
## Default EJB component pool properties (applies when not specified
## in trifork-system-conf.xml).  These values applies in the
## deployment process, so setting these for the server has little
## value. 
##
trifork.ejb.defaultPoolSize=1
trifork.ejb.maxPoolSize=20
trifork.ejb.poolTimeout=0


##
## Define SQL type for saving a BLOB in SystemDB 
##
trifork.profile.DataType.BinaryType=BINARY

##
## Max timeout used for shutting down a POA.  Set this to -1 for
## infinite timeout.  Default value is 10000ms (10sec).  This property
## defines the maximum wait when doing "eas server -stop" or "eas
## system -stop"; which may otherwise hang if business components 
## and/or resource applications hang indefinetely.
##
#trifork.corba.shutdown.timeout=10000

##
## Allow the application server to accept connections on 
## any local interface.  If this is set to false (or not set),
## then the app server only accepts incoming connections
## via the interface defined by trifork.local.host
##
trifork.acceptOnAnyInterface=true

##
## run the java compiler in a separate process?  
## 
## defalts to false
#trifork.javac.external=false

##
## Choose compiler.  classic is "oldjavac".  modern is "javac".
## The "modern" compiler leaks file handles, and thus should only
## be used in conjunction with trifork.javac.external=true.
##
## defaults to: 1.3: classic / 1.4: modern
##
#trifork.javac.compiler=modern
#trifork.javac.compiler=classic
#trifork.javac.compiler=eclipse

##
## Keep the generated web services classes
## The classes will be stored in ${tmp.dir}/wsdlstubs
##
## Default to false
##
#trifork.keep.generated.ws.classes=true

##
## when using the external compiler, this allows controlling the
## command used to invoke the compiler.
##
## defaults to: modern -> "javac", classic: "oldjavac"
##
## Only set this property if you're in a non-standard java
## environment. 
#trifork.javac.external.command=${java.home}/bin/javac


#trifork.javac.external=true
#trifork.javac.external.command=x:\\products\\jikes-1.18\\bin\\jikes.exe
#trifork.javac.compiler=modern

trifork.kernel.containers=management,profile,public,clientlauncher,uddi,console

##
## properties for jaxr
##
javax.xml.registry.ConnectionFactoryClass=com.sun.xml.registry.uddi.ConnectionFactoryImpl


##
## Comment out to enable experimental Portlet 2.0 support. 
##
trifork.portlets.disabled=true
