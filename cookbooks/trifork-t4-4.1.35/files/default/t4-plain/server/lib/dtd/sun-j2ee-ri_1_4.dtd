<!--
This is the DTD defining the runtime binding information
for a J2EE application in Sun Microsystems' J2EE 1.4 Reference Implementation.
It is only used in Sun's J2EE 1.4 Reference Implementation.

DISCLAIMER: This format may change without notice between major or minor 
version. Not for general distibution.
-->

<!--
This is the root element of the runtime descriptor document.
-->
<!ELEMENT j2ee-ri-specific-information ( server-name?,  rolemapping?, web*, enterprise-beans*, app-client*) >

<!--
This holds the runtime configuration properties of the message-driven bean 
in its operation environment.  For example, this may include information 
about the name of a physical JMS destination etc.
Defined this way to match the activation-config on the standard
deployment descriptor for message-driven bean.
-->
<!ELEMENT activation-config ( description?, activation-config-property+ ) >

<!ELEMENT activation-config-property ( 
  activation-config-property-name, activation-config-property-value ) >

<!--
This holds the name of a runtime activation-config property
-->
<!ELEMENT activation-config-property-name ( #PCDATA ) >

<!--
This holds the value of a runtime activation-config property
-->
<!ELEMENT activation-config-property-value ( #PCDATA ) >

<!--
This is the root element describing all the runtime bindings of a single application client
-->
<!ELEMENT app-client (module-name?, resource-ref*, ejb-ref*, resource-env-ref*, message-destination*, service-ref* )>

<!--
This is the root element for container managed persistence information for 
an EJB1.1 entity bean in the J2EE 1.2/1.2.1 Reference Implementation 
(deprecated, replaced by ejb20-cmp element).
-->
<!ELEMENT cmp ( ds-jndi-name, default-resource-principal?, sql-statement*, table-create-sql, table-remove-sql, create-table-deploy, 
delete-table-undeploy )>

<!--
This element contains the database to be used for storing CMP beans 
in an ejb-jar.
-->
<!ELEMENT cmpresource ( ds-jndi-name, default-resource-principal? )>

<!--
This element indicates whether to create the cmp table during deployment or not. Takes the values true or false.
-->
<!ELEMENT create-table-deploy (#PCDATA)>

<!--
This is the root element describing the default principal that the container will use to access a resource.
-->
<!ELEMENT default-resource-principal ( name,  password)>

<!--
This element indicates whether to delete the cmp table during undeployment of the entity bean.
-->
<!ELEMENT delete-table-undeploy (#PCDATA)>

<!--
This element contains a human readble name.
-->
<!ELEMENT display-name (#PCDATA)>

<!--
The text value of this element is the jndi name of a data source..
-->
<!ELEMENT ds-jndi-name (#PCDATA)>

<!--
This is the root element describing runtime bindings for a single ejb.

jndi-name for session and entity bean requires to be NON NULL.
jndi-name for message-driven bean requires to be NULL, 
          use mdb-resource-adapter.
-->
<!ELEMENT ejb ( ejb-name, jndi-name?, ior-security-config?, principal?, resource-ref*, ejb-ref*, resource-env-ref*, service-ref*, gen-classes?, cmp?, ejb20-cmp?, mdb-connection-factory?, jms-durable-subscription-name?, mdb-resource-adapter? , webservice-endpoint*)>

<!--
The text in this element matches the display name of the ejb to which it refers.
-->
<!ELEMENT ejb-name (#PCDATA)>

<!--
This is the root element which binds an ejb reference to a jndi name.
-->
<!ELEMENT ejb-ref (ejb-ref-name, jndi-name)>

<!--
The ejb ref name locates the name of the ejb reference in the application.
-->
<!ELEMENT ejb-ref-name (#PCDATA)>

<!--
This element describes runtime information for a CMP EntityBean 
object for EJB1.1 and EJB2.0 beans.
-->
<!ELEMENT ejb20-cmp ( create-table-deploy, delete-table-undeploy, sql-statement* )>

<!--
This is the root element describing all the runtime bindings of an ejb-jar
in the application.
-->
<!ELEMENT enterprise-beans ( name?, module-name?, unique-id, ejb*, join-object*,
 cmpresource?, message-destination*, webservice-description* )>

<!--
This element contains all the generated class names for a bean.
-->
<!ELEMENT gen-classes ( remote-impl?, local-impl?, remote-home-impl?,
local-home-impl?, state-impl?, ejb-impl? )>

<!--
This contains the name of the generated EJBObject impl class. 
-->
<!ELEMENT remote-impl (#PCDATA)>

<!--
This contains the name of the generated EJBLocalObject impl class. 
-->
<!ELEMENT local-impl (#PCDATA)>

<!--
This contains the name of the generated EJBHome impl class. 
-->
<!ELEMENT remote-home-impl (#PCDATA)>

<!--
This contains the name of the generated EJBLocalHome impl class. 
-->
<!ELEMENT local-home-impl (#PCDATA)>

<!--
This contains the name of the generated State class for CMP. 
-->
<!ELEMENT state-impl (#PCDATA)>

<!--
This contains the name of the generated ejb impl class for CMP.
-->
<!ELEMENT ejb-impl (#PCDATA)>

<!--
This is the root element describing all the data about a user-group.
-->
<!ELEMENT group EMPTY>

<!--
The name attribute of a group is the name of the user group.
-->
<!ATTLIST group name NMTOKEN #REQUIRED>

<!--
This is the root element describing a set of groups.
-->
<!ELEMENT groups (group*)>

<!--
Information about join objects
-->
<!ELEMENT source (name, field)>

<!--
Information about join objects
-->
<!ELEMENT sink (name, field)>

<!--
Information about CMRField
-->
<!ELEMENT field (#PCDATA)>

<!--
Information about join objects
-->
<!ELEMENT join-object (name, ejb20-cmp, source, sink)>

<!--
The name of a durable subscription associated with a message-driven 
ejb's destination.
-->
<!ELEMENT jms-durable-subscription-name (#PCDATA)>

<!--
The text in this node is a jndi name.
-->
<!ELEMENT jndi-name (#PCDATA)>

<!--
This is the root element describing the runtime bindings of a mail resource reference.
-->
<!ELEMENT mail-configuration (name, mail-from, mail-host)>

<!--
This node holds the address of the sender.
-->
<!ELEMENT mail-from (#PCDATA)>

<!--
This node holds the mail host information of a JavaMail session object.
-->
<!ELEMENT mail-host (#PCDATA)>

<!--
This node holds the name of the connection factory associated with 
a message-driven ejb
-->
<!ELEMENT mdb-connection-factory (#PCDATA)>

<!--
This node holds information about a logical message destination
-->
<!ELEMENT message-destination (message-destination-name, jndi-name)>

<!--
This node holds the name of a logical message destination
-->
<!ELEMENT message-destination-name (#PCDATA)>

<!ELEMENT method (description?, ejb-name, method-intf?, method-name,
method-params?)>
<!ELEMENT method-intf (#PCDATA)>
<!ELEMENT method-name (#PCDATA)>
<!ELEMENT method-params (method-param*)>
<!ELEMENT method-param (#PCDATA)>

<!--
This text nodes holds the module name as referenced in the application
-->
<!ELEMENT module-name (#PCDATA)>

<!--
This text nodes holds a name string.
-->
<!ELEMENT name (#PCDATA)>

<!--
The name of an operation for CMP (e.g. "createRow" for a EJB Object).
-->
<!ELEMENT  operation (#PCDATA)>

<!--
This element holds password text.
-->
<!ELEMENT password (#PCDATA)>

<!--
This node describes a username on the platform.
-->
<!ELEMENT principal (name)>

<!--
This node holds a list of usernames.
-->
<!ELEMENT principals (principal*)>

<!--
The name of a resource reference.
-->
<!ELEMENT res-ref-name (#PCDATA)>

<!--
This node holds the module ID of the resource adapter that
is responsible for delivering messages to the message-driven
bean, as well as the runtime configuration information for
the mdb.
-->
<!ELEMENT mdb-resource-adapter ( resource-adapter-mid, activation-config? )>

<!--
This node holds the module ID of the resource adapter that is responsible 
for delivering messages to the message-driven bean.
-->
<!ELEMENT resource-adapter-mid ( #PCDATA ) >

<!--
This node holds all the runtime bindings of a resource env reference.
-->
<!ELEMENT resource-env-ref ( resource-env-ref-name, jndi-name )>

<!--
The name of a resource env reference.
-->
<!ELEMENT resource-env-ref-name (#PCDATA)>

<!--
This node holds all the runtime bindings of a resource reference.
-->
<!ELEMENT resource-ref  ( res-ref-name, jndi-name,  default-resource-principal?,  mail-configuration?)>

<!--
This node holds the mapping of roles to usernames and user groups on the server.
-->
<!ELEMENT rolemapping (name?, role*)>

<!--
This node holds the mapping of a role to a list of users and user-groups.
-->
<!ELEMENT role (principals, groups )>

<!--
The name attribute of a role is the rolename of that role.
-->
<!ATTLIST role name NMTOKEN #REQUIRED>

<!--
This node holds the name of the server on to which the application is being deployed. Not currently used for anything.
-->
<!ELEMENT server-name (#PCDATA)>

<!--
The text of this node is an SQL statement.
-->
<!ELEMENT sql (#PCDATA)>

<!--
This node associates an sql statement with a method. The method may be 
a finder/ejbSelect method (so the method element would be the same as in
the EJB2.0 DTD). 
-->
<!ELEMENT sql-statement ((method | operation), sql)>

<!--
The text in this node is the sql statement that is used to create a table for an entity bean with CMP.
-->
<!ELEMENT  table-create-sql (#PCDATA)>

<!--
The text in this node is the sql statement that is used to delete the table for an entity bean with CMP.
-->
<!ELEMENT table-remove-sql (#PCDATA)>

<!--
The unique id for the module in the application bundle
-->
<!ELEMENT unique-id (#PCDATA)>

<!--
This node holds all the runtime bindings for a web bundle within the application.
-->
<!ELEMENT web (display-name?, module-name?, servlet*, context-root, resource-ref*, ejb-ref*, resource-env-ref*, service-ref*, message-destination*, webservice-description* )>

<!--
This node holds all the runtime information for a web component within the application
-->
<!ELEMENT servlet (servlet-name, principal?, webservice-endpoint*)>

<!--
The text in this element matches the display name of the servlet to which it refers.
-->
<!ELEMENT servlet-name (#PCDATA)>

<!--
This element specifies the web context root. Used only by the J2EE SDK tools, do no modify, use the application.xml instead
-->
<!ELEMENT context-root (#PCDATA)>

<!--
This is the element describing security configuration information for the IOR.
-->  

<!ELEMENT ior-security-config ( transport-config? , as-context?, sas-context?  )> 

<!ELEMENT transport-config ( integrity, confidentiality, establish-trust-in-target, establish-trust-in-client )> 

<!--
This element indicates if the target supports integrity protected messages. The
values are NONE, SUPPORTED or REQUIRED
-->  
<!ELEMENT integrity ( #PCDATA)>

<!--
This element indicates if the target supports privacy protected messages. The
values are NONE, SUPPORTED or REQUIRED
-->  
<!ELEMENT confidentiality ( #PCDATA)>

<!--
This element indicates if the target is capable of authenticating to a client. 
The values are NONE, SUPPORTED or REQUIRED.
-->  
<!ELEMENT establish-trust-in-target ( #PCDATA)>

<!--
This element indicates if the target is capable of authenticating a client. The
values are NONE, SUPPORTED or REQUIRED.
-->  
<!ELEMENT establish-trust-in-client ( #PCDATA)>

<!--
This is the element describing the authentication mechanism that will be
used to authenticate the client. If specified it will be the username-password
mechanism.
-->  
<!ELEMENT as-context ( auth-method, realm, required )> 

<!--
This element specifies if the authentication method specified is required
to be used for client authentication. If so the EstablishTrustInClient bit
will be set in the target_requires field of the AS_Context. The element value
is either true or false.
-->  

<!ELEMENT required ( #PCDATA )> 

<!--
This element describes the authentication method. 

When used with ior-security-config as-context, the only supported 
value is USERNAME_PASSWORD.

When used with ejb web service endpoint login-config,  allowable values
are BASIC, CLIENT_CERT. 
-->  
<!ELEMENT auth-method ( #PCDATA )> 

<!--
This element describes the realm in which the user is authenticated.
-->  
<!ELEMENT realm ( #PCDATA )> 

<!--
This element describes the sas-context fields.
-->  

<!ELEMENT sas-context ( caller-propagation )> 

<!--
This element indicates if the target will accept propagated caller identities
The values are NONE, SUPPORTED or REQUIRED.
-->  
<!ELEMENT caller-propagation ( #PCDATA) >

<!--
Information about a web service endpoint.  
-->
<!ELEMENT webservice-endpoint ( port-component-name, endpoint-address-uri?, tie-class?, login-config?, service-qname?, servlet-impl-class? )>

<!--
Unique name of a port component within a module
-->
<!ELEMENT port-component-name ( #PCDATA )>

<!--
Relative path combined with web server root to form fully qualified
endpoint address for a web service endpoint.  For servlet endpoints, this
value is relative to the servlet's web application context root.  In
all cases, this value must be a fixed pattern(i.e. no "*" allowed).
If the web service endpoint is a servlet that only implements a single
endpoint, and it has only one url-pattern, it is not necessary to set 
this value since the container can derive it from web.xml.
-->
<!ELEMENT endpoint-address-uri ( #PCDATA )>

<!--
The name of tie implementation class for a port-component.  This is 
derived during deployment.
-->
<!ELEMENT tie-class (#PCDATA)>

<!-- 
The service-qname element declares the specific WSDL service
element that is being refered to.  It is not set by the deployer.
It is derived during deployment.
-->
<!ELEMENT service-qname (namespaceURI, localpart)>

<!--
The localpart element indicates the local part of a QNAME.
-->
<!ELEMENT localpart (#PCDATA)>

<!--
The namespaceURI element indicates a URI.
-->
<!ELEMENT namespaceURI (#PCDATA)>

<!-- 
Optional authentication configuration for an EJB web service endpoint.
Not needed for servet web service endpoints.  Their security configuration
is contained in the standard web application descriptor.
-->
<!ELEMENT login-config ( auth-method )>

<!--
Name of application-written servlet impl class contained in deployed war.
This is not set by the deployer.  It is derived by the container
during deployment.
-->
<!ELEMENT servlet-impl-class (#PCDATA)>

<!--
Runtime settings for a web service reference.  In the simplest case,
there is no runtime information required for a service ref.  Runtime info
is only needed in the following cases :
 * to define default property settings for Call objects
 * to define default property settings for Stub objects
 * to define the port that should be used to resolve a container-managed port
that does not have a port-component-link
-->
<!ELEMENT service-ref ( service-ref-name, service-impl-class?, service-qname?, port-info*, call-property* )>

<!--
Coded name (relative to java:comp/env) for a service-reference
-->
<!ELEMENT service-ref-name ( #PCDATA )>

<!--
Name of generated service implementation class. 
This is derived during deployment.
-->
<!ELEMENT service-impl-class ( #PCDATA )>

<!-- 
Information for a port within a service-reference.
-->
<!ELEMENT port-info ( service-endpoint-interface, wsdl-port?, stub-property* )>

<!--
Fully qualified name of service endpoint interface
-->
<!ELEMENT service-endpoint-interface ( #PCDATA )>

<!-- 
Port name from the service-ref's WSDL that should be returned for a 
container-managed port lookup. 
-->
<!ELEMENT wsdl-port ( namespaceURI, localpart )>

<!-- 
JAXRPC property values that should be set on a stub before it's returned to 
to the web service client.  The property names can be any properties supported
by the JAXRPC Stub implementation.  The standard set are defined on
javax.xml.rpc.Stub
-->
<!ELEMENT stub-property ( name, value )>

<!-- 
JAXRPC property values that should be set on a Call object before it's 
returned to to the web service client.  The property names can be any 
properties supported by the JAXRPC Call implementation.  The standard
set are defined on javax.xml.rpc.Call
-->
<!ELEMENT call-property ( name, value )>

<!-- 
Runtime information about a web service.  This is not specified by the
developer.  It is derived during deployment.
-->
<!ELEMENT webservice-description ( webservice-description-name, final-wsdl )>

<!--
Unique name of a webservice within a module
-->
<!ELEMENT webservice-description-name ( #PCDATA )>

<!--
URL of the final wsdl document generated during deployment for a web service and stored in the application repository
-->
<!ELEMENT final-wsdl ( #PCDATA )>
