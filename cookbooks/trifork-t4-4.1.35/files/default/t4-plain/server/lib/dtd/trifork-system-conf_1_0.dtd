<?xml version='1.0' encoding='UTF-8' ?>
<!--
Copyright (c) 2001 Trifork Technologies.
-->
<!--
This is the XML DTD for the Trifork system configuration descriptor.
A valid descriptor must have a DOCTYPE declaration of the form:

<!DOCTYPE trifork-system-conf PUBLIC 
     "-//Trifork Technologies//DTD Trifork System Descriptor1.0//EN" 
     "http://trifork.com/j2ee/dtds/trifork-system-conf_1_0.dtd">
-->

<!-- 
The application-client element adds information to an application-client
element in the portable descriptor (application.xml). Matching is done on the
values of the display-name elements

Used in: trifork-system-conf
-->
<!ELEMENT application-client (display-name , env-entry* , ejb-ref* , resource-ref* , resource-env-ref*)>

<!-- 
This element describes runtime information for a CMP EntityBean object for
EJB1.1 and EJB2.0 beans.

Used in: ejb
-->
<!ELEMENT cmp (table-name? , cmp-field* , sql-statement* , create-table-deploy? , delete-table-undeploy? , is-modified-method?)>

<!--
The cmp-field element makes it possible to override the default choices of
database column name and type for a cmp-field defined in the corresponding
ejb-jar.xml descriptor

Used in: cmp
-->
<!ELEMENT cmp-field (field-name , db-field-name? , db-field-type?)>

<!--
The cmp-resource element describes a named resource to be used by CMP. 

Used in: enterprise-beans
-->
<!ELEMENT cmp-resource (jndi-name , resource-principal?)>

<!--
The context-root element defines the context root for a web application. Note
that if a web application is embedded in an enterprise archive, the context
root may be specified in a portable way in the application.xml descriptor.

Used in: web-app
-->
<!ELEMENT context-root (#PCDATA)>

<!-- 
This element indicates whether to create the cmp table during deployment or
not. 

The create-table-deploy element must be one of the two following:

	<create-table-deploy>True</create-table-deploy>
	<create-table-deploy>False</create-table-deploy>

Used in: cmp
-->
<!ELEMENT create-table-deploy (#PCDATA)>

<!--
Specify the database column name for a cmp field.

Used in: cmp-field
-->
<!ELEMENT db-field-name (#PCDATA)>

<!--
Specify the database column type (the SQL type) for a cmp field.

Used in: cmp-field
-->
<!ELEMENT db-field-type (#PCDATA)>

<!-- 
Identifies the default value for the HTTP header 'Host:' to use for
constructing external URLs, e.g. for redirects.

Used in: web-app
-->
<!ELEMENT default-host (#PCDATA)>

<!-- 
This element indicates whether to delete the cmp table during undeployment of
the entity bean.

The delete-table-undeploy element must be one of the two following:

	<delete-table-undeploy>True</delete-table-undeploy>
	<delete-table-undeploy>False</delete-table-undeploy>

Used in: cmp
-->
<!ELEMENT delete-table-undeploy (#PCDATA)>

<!--
This element contains a human readble name.

Used in: application-client, web-app
-->
<!ELEMENT display-name (#PCDATA)>

<!--
The ejb element adds information to an ejb element in the portable descriptor
(ejb-jar.xml). Matching is done on the values of the ejb-name elements.

Used in: enterprise-beans
-->
<!ELEMENT ejb (ejb-name , jndi-name? , cmp? , principal? ,
mdb-durable-subscription-name? , mdb-connection-factory? ,
ior-security-config? , max-pool-size? , default-pool-size? ,
pool-timeout? , env-entry* , ejb-ref* , resource-ref* , resource-env-ref*)> 

<!--
Specifies the name of an enterprise bean.

Used in: ejb, method
-->
<!ELEMENT ejb-name (#PCDATA)>

<!-- 
The ejb-ref element binds an ejb reference to a jndi name. 

Used in: application-client, ejb, web-app.
-->
<!ELEMENT ejb-ref (ejb-ref-name , jndi-name)>

<!-- 
The ejb-ref-name element links an ejb-ref element to a ejb-ref element in the
corresponding portable descriptor (application-client.xml, ejb-jar.xml or
web.xml).

Used in: ejb-ref
-->
<!ELEMENT ejb-ref-name (#PCDATA)>

<!-- 
The endpoint element identifies an HTTP, HTTPS or AJPv13 endpoint by name. 
-->
<!ELEMENT endpoint (#PCDATA)>

<!--
The enterprise-beans element groups ejb and cmp-resource elements.

Used in: trifork-system-conf
-->
<!ELEMENT enterprise-beans (ejb* , cmp-resource?)>

<!-- 
The env-entry element contains the declaration of an enterprise bean's
environment entry. The declaration consists of an optional description, the
name of the environment entry, and an optional value.

Used in: application-client, ejb, web-app
-->
<!ELEMENT env-entry (env-entry-name , env-entry-type , env-entry-value?, 
env-entry-property-binding?)>

<!-- 
The env-entry-name element contains the name of an enterprise bean's
environment entry.

Used in: env-entry
-->
<!ELEMENT env-entry-name (#PCDATA)>

<!--
The env-entry-property-binding element associates the value of an env-entry with
runtime value of a trifork kernlet property

Used in: env-entry
-->
<!ELEMENT env-entry-property-binding (#PCDATA)>

<!-- 
The env-entry-type element contains the fully-qualified Java type of the
environment entry value that is expected by the enterprise bean's code. 

Used in: env-entry
 -->
<!ELEMENT env-entry-type (#PCDATA)>

<!-- 
The env-entry-value element contains the value of an enterprise bean's
environment entry. The value must be a String that is valid for the constructor
of the specified type that takes a single String parameter.

Used in: env-entry
-->
<!ELEMENT env-entry-value (#PCDATA)>

<!--
Specifies the database column name for for a CMP field.

Used in: cmp-field
-->
<!ELEMENT field-name (#PCDATA)>

<!-- 
Specifies the name of a no-arg method on the CMP bean class with return type
boolean. This method should return true only if the persistent fields of the
CMP bean instance has been modified, and thus need to be stored.

Used in: cmp
-->
<!ELEMENT is-modified-method (#PCDATA)>

<!-- 
The jndi-name element specifies a jndi name. 

Used in: cmp-resource, ejb, ejb-ref, mdb-connection-factory,
resource-env-ref, resource-ref, jndi-names
-->
<!ELEMENT jndi-name (#PCDATA)>

<!-- 
Specifies the key store for https

Used in: https
-->
<!ELEMENT keystore (keystore-type? , keystore-manager? , keystore-file , keystore-passphrase?)>

<!-- 
Keystore file. Path to key store. Relative paths are resolved relative to the
server instance directory.

Used in: keystore
-->
<!ELEMENT keystore-file (#PCDATA)>

<!-- 
keystore manager, If not specified, the value defaults to SunX509 

Used in: keystore
-->
<!ELEMENT keystore-manager (#PCDATA)>

<!-- 
Passphrase for the keystore. If this element is missing, the server will
prompt for this on the console.

Used in: keystore
-->
<!ELEMENT keystore-passphrase (#PCDATA)>

<!-- 
Supported key store type. If not specified, the value defaults to JKS.

Used in: keystore
-->
<!ELEMENT keystore-type (#PCDATA)>

<!-- 
The jndi-names element specifies one or more jndi-name elements

Used in: connector
-->
<!ELEMENT jndi-names (jndi-name, jndi-name*)>

<!--
This node holds the address of the sender.

Used in: mail-resource-conf
-->
<!ELEMENT mail-from (#PCDATA)>

<!--
This node holds the mail to information of a JavaMail session object.

Used in: mail-resource-conf
-->
<!ELEMENT mail-host (#PCDATA)>

<!--
This is the root element describing the runtime bindings of a mail resource
reference.

vUsed in: resource-ref
-->
<!ELEMENT mail-resource-conf (name , mail-from , mail-host)>

<!-- 
This element describes the connection factory to use for a particular message
driven bean. Used in EJB.

Used in: ejb
-->
<!ELEMENT mdb-connection-factory (jndi-name , resource-principal?)>

<!--
Specifes a method. See the description of the method element in ejb-jar_2_0.dtd
for details.

Used in: sql-statement
-->
<!ELEMENT method (method-intf?, method-name, method-params)>

<!--
Specifes how to locate a method. See the description of the method-intf element
in ejb-jar_2_0.dtd for details.

Used in: method
-->
<!ELEMENT method-intf (#PCDATA)>

<!--
Specifes a method name. See the description of the method-name element in
ejb-jar_2_0.dtd for details.

Used in: method
-->
<!ELEMENT method-name (#PCDATA)>

<!--
Specifes a method parameter. See the description of the method-param element in
ejb-jar_2_0.dtd for details.

Used in: method-params
-->
<!ELEMENT method-param (#PCDATA)>

<!--
Specifes a list of method parameters. See the description of the method-params
element in ejb-jar_2_0.dtd for details.

Used in: method
-->
<!ELEMENT method-params (method-param*)>

<!--
This text nodes holds a name string.

Used in: 
-->
<!ELEMENT name (#PCDATA)>

<!--
Specify a password string

Used in: resource-principal
-->
<!ELEMENT password (#PCDATA)>

<!-- 
This node describes a username on the platform. 

Used in: principals, resource-principal
-->
<!ELEMENT principal (#PCDATA)>

<!-- 
This node holds a list of usernames. 

Used in: role
-->
<!ELEMENT principals (principal*)>

<!-- 
The name of a resource reference. 

Used in: resource-ref
-->
<!ELEMENT res-ref-name (#PCDATA)>

<!--
Attach a jndi-name to a resource-env-ref defined in the portable descriptor
(application-client.xml, ejb-jar.xml or web.xml).

Used in: application-client, ejb, web-app
-->
<!ELEMENT resource-env-ref (resource-env-ref-name , jndi-name)>

<!--
The name of a resource-env-ref. The resource-env-ref-name element must match
the resource-env-ref-name of a resource-env-ref in the portable descriptor
(application-client.xml, ejb-jar.xml or web.xml).

Used in: resource-env-ref
-->
<!ELEMENT resource-env-ref-name (#PCDATA)>

<!--
Groups a name and a password

Used in: cmp-resource, mdb-connection-factory, resource-ref
-->
<!ELEMENT resource-principal (principal , password)>

<!-- 
This node holds all the runtime bindings of a resource reference. 

Used in: application-client, ejb, web-app
-->
<!ELEMENT resource-ref (res-ref-name , jndi-name , resource-principal? , mail-resource-conf?)>

<!-- 
This node holds the mapping of a role to a list of users and user-groups.

Used in: 
-->
<!ELEMENT role (principals)>

<!-- 
The name attribute of a role is the rolename of that role. 

Used in: role-mapping
-->
<!ATTLIST role name NMTOKEN  #REQUIRED>

<!-- 
This node holds the mapping of roles to usernames and user groups. 

Used in: trifork-system-conf
-->
<!ELEMENT role-mapping (role*)>

<!-- 
The text of this node is an SQL statement for a CMP finder method.

Used in: sql-statement
-->
<!ELEMENT sql (#PCDATA)>

<!-- 
This node associates an sql statement with a method. The method may be a
finder/ejbSelect method (so the method element would be the same as in the
EJB2.0 DTD). 

Used in: cmp
-->
<!ELEMENT sql-statement ((method | operation) , sql)>

<!--
Specify system name. This element is currently ignored.

Used in: trifork-system-conf
-->
<!ELEMENT system-name (#PCDATA)>

<!--
Specify the database table name representing the state of a CMP entity bean.

Used in: cmp
-->
<!ELEMENT table-name (#PCDATA)>

<!--
This is the root element of the Trifork system configuration descriptor.

-->
<!ELEMENT trifork-system-conf (system-name? , role-mapping* , web-app* , enterprise-beans* , application-client*, connector*)>

<!-- 
The web-app element adds information to an web-app element in the portable
descriptor (web.xml). Matching is done on the values of the display-name
elements.

Used in: trifork-system-conf
--> 
<!ELEMENT web-app (display-name, context-root, endpoint*, env-entry*, ejb-ref*, resource-ref*, resource-env-ref*)>


<!--
This is the element describing security configuration information for the IOR.
-->  

<!ELEMENT ior-security-config ( transport-config? , as-context?, sas-context?  )> 

<!ELEMENT transport-config ( integrity, confidentiality, establish-trust-in-target, establish-trust-in-client )> 
<!--
This element indicates if the target supports integrity protected messages. The
values are NONE, SUPPORTED or REQUIRED
-->  
<!ELEMENT integrity ( #PCDATA)>

<!--
This element indicates if the target supports privacy protected messages. The
values are NONE, SUPPORTED or REQUIRED
-->  
<!ELEMENT confidentiality ( #PCDATA)>

<!--
This element indicates if the target is capable of authenticating to a client. 
The values are NONE, SUPPORTED or REQUIRED.
-->  
<!ELEMENT establish-trust-in-target ( #PCDATA)>

<!--
This element indicates if the target is capable of authenticating a client. The
values are NONE, SUPPORTED or REQUIRED.
-->  
<!ELEMENT establish-trust-in-client ( #PCDATA)>

<!--
This is the element describing the authentication mechanism that will be
used to authenticate the client. If specified it will be the username-password
mechanism.
-->  
<!ELEMENT as-context ( auth-method, realm, required )> 

<!--
This element specifies if the authentication method specified is required
to be used for client authentication. If so the EstablishTrustInClient bit
will be set in the target_requires field of the AS_Context. The element value
is either true or false.
-->  

<!ELEMENT required ( #PCDATA )> 

<!--
This element describes the authentication method. The only supported value
is USERNAME_PASSWORD
-->  
<!ELEMENT auth-method ( #PCDATA )> 

<!--
This element describes the realm in which the user is authenticated.
-->  
<!ELEMENT realm ( #PCDATA )> 

<!--
This element describes the sas-context fields.
-->  

<!ELEMENT sas-context ( caller-propagation )> 

<!--
This element indicates if the target will accept propagated caller identities
The values are NONE, SUPPORTED or REQUIRED.
-->  
<!ELEMENT caller-propagation ( #PCDATA) >

<!-- 
This element describes the maximum pool size to be kept for an EJB.
-->
<!ELEMENT max-pool-size (#PCDATA) >

<!--
This element describes the number of instances to load into an EJB
pool when the container is started.
-->
<!ELEMENT default-pool-size (#PCDATA) >

<!-- 
This elemenent describes how long (in seconds) a EJB component
instance is kept live in the pool.  After this timeout, the pooled
instance is discarded.  
-->
<!ELEMENT pool-timeout (#PCDATA) >

<!--
The element connector is used to assign a jndi-name to a connector,
and to override the values of config-properties defined in the 
portable descriptor.
-->

<!ELEMENT connector ( display-name , jndi-names , config-property* ) >

<!--
The element config-property contains a declaration of a single
configuration property for a ManagedConnectionFactory instance.

Each ManagedConnectionFactory instance creates connections to a
specific EIS instance based on the properties configured on the
ManagedConnectionFactory instance. The configurable properties are
specified only once in the deployment descriptor, even though a
resource adapter can be used to configure multiple ManagedConnnection-
Factory instances (that create connections to different instances of
the same EIS).

The declaration consists of an optional description, name, type
and an optional value of the configuration property. If the resource
adapter provider does not specify a value than the deployer is
responsible for providing a valid value for a configuration property.

Any bounds or well-defined values of properties should be described
in the description element.

Used in: resourceadapter
-->
<!ELEMENT config-property (config-property-name,
config-property-type?, config-property-value)>

<!--
The element config-property-name contains the name of a configuration
property.

The connector architecture defines a set of well-defined properties
all of type java.lang.String. These are as follows:
     <config-property-name>ServerName</config-property-name>
     <config-property-name>PortNumber</config-property-name>
     <config-property-name>UserName</config-property-name>
     <config-property-name>Password</config-property-name>
     <config-property-name>ConnectionURL</config-property-name>

A resource adapter provider can extend this property set to include
properties specific to the resource adapter and its underlying EIS.

Used in: config-property

Example: <config-property-name>ServerName</config-property-name>
-->
<!ELEMENT config-property-name (#PCDATA)>

<!--
The element config-property-type contains the fully qualified Java
type of a configuration property as required by ManagedConnection-
Factory instance.

The following are the legal values of config-property-type:
   java.lang.Boolean, java.lang.String, java.lang.Integer,
   java.lang.Double, java.lang.Byte, java.lang.Short,
   java.lang.Long, java.lang.Float, java.lang.Character

Used in: config-property

Example: <config-property-type>java.lang.String</config-property-type>
-->
<!ELEMENT config-property-type (#PCDATA)>

<!--
The element config-property-value contains the value of a configuration
entry.

Used in: config-property

Example: <config-property-value>WombatServer</config-property-value>
-->
<!ELEMENT config-property-value (#PCDATA)>
